Final Project: Advanced SQL Techniques
Reuse the crime data from the practice and answer the questions:


Exercise 1: Using Joins
You have been asked to produce some reports about the communities and crimes in the Chicago area. You will need to use SQL join queries to access the data stored across multiple tables.
Question 1

Write and execute a SQL query to list the school names, community names and average attendance for communities with a hardship index of 98.
SELECT CAS.NAME_OF_SCHOOL "School Name", CA.COMMUNITY_AREA_NAME "Community Area Name", CAS.AVERAGE_STUDENT_ATTENDANCE "Average Student Attendance"
FROM CHICAGO_PUBLIC_SCHOOLS CAS
	JOIN CENSUS_DATA CA
ON CAS.COMMUNITY_AREA_NUMBER = CA.COMMUNITY_AREA_NUMBER
WHERE CA.HARDSHIP_INDEX = 98;

Question 2

Write and execute a SQL query to list all crimes that took place at a school. Include case number, crime type and community name.
SELECT CN.CASE_NUMBER "Case Number", CN.PRIMARY_TYPE "Primary Type", CA.COMMUNITY_AREA_NAME "Community Area",
 CN.LOCATION_DESCRIPTION "Crime Location Description"
FROM CHICAGO_CRIME_DATA CN
	LEFT JOIN CENSUS_DATA CA ON CN.COMMUNITY_AREA_NUMBER = CA.COMMUNITY_AREA_NUMBER
WHERE CN.LOCATION_DESCRIPTION LIKE '%SCHOOL%';


Exercise 2: Creating a View
For privacy reasons, you have been asked to create a view that enables users to select just the school name and the icon fields from the CHICAGO_PUBLIC_SCHOOLS table. By providing a view, you can ensure that users cannot see the actual scores given to a school, just the icon associated with their score. You should define new names for the view columns to obscure the use of scores and icons in the original table.
Question 1
• Write and execute a SQL statement to create a view showing the columns listed in the following table, with new column names as shown in the second column.

CREATE VIEW chicago_school_info(School_Name,Safety_Rating,Family_Rating,Environment_Rating,Instruction_Rating,Leaders_Rating,Teachers_Rating)
AS SELECT NAME_OF_SCHOOL,Safety_Icon, Family_Involvement_Icon, Environment_Icon,Instruction_Icon, Leaders_Icon, Teachers_Icon
FROM CHICAGO_PUBLIC_SCHOOLS;


Column name in CHICAGO_PUBLIC_SCHOOLS	Column name in view
NAME_OF_SCHOOL	School_Name
Safety_Icon	Safety_Rating
Family_Involvement_Icon	Family_Rating
Environment_Icon	Environment_Rating
Instruction_Icon	Instruction_Rating
Leaders_Icon	Leaders_Rating
Teachers_Icon	Teachers_Rating
• Write and execute a SQL statement that returns all of the columns from the view.
SELECT * FROM CHICAGO_SCHOOL_INFO;

• Write and execute a SQL statement that returns just the school name and leaders rating from the view.
SELECT SCHOOL_NAME, LEADERS_RATING FROM CHICAGO_SCHOOL_INFO;



Exercise 3: Creating a Stored Procedure
The icon fields are calculated based on the value in the corresponding score field. You need to make sure that when a score field is updated, the icon field is updated too. To do this, you will write a stored procedure that receives the school id and a leaders score as input parameters, calculates the icon setting and updates the fields appropriately.
Question 1
• Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer. Don’t forget to use the #SET TERMINATOR statement to use the @ for the CREATE statement terminator.

--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE       -- Name of this stored procedure routine

LANGUAGE SQL                        -- Language used in this routine 
READS SQL DATA                      -- This routine will only read data from the table

DYNAMIC RESULT SETS 1               -- Maximum possible number of result-sets to be returned to the caller query

BEGIN 

    DECLARE C1 CURSOR               -- CURSOR C1 will handle the result-set by retrieving records row by row from the table
    WITH RETURN FOR                 -- This routine will return retrieved records as a result-set to the caller query
    
    SELECT "SCHOOL_ID", "LEADERS_SCORE" FROM CHICAGO_PUBLIC_SCHOOLS;          -- Query to retrieve all the records from the table
    
    OPEN C1;                        -- Keeping the CURSOR C1 open so that result-set can be returned to the caller query

END
@                                   -- Routine termination character

CALL UPDATE_LEADERS_SCORE
@


Question 2:
Inside your stored procedure, write a SQL statement to update the Leaders_Score field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID to the value in the in_Leader_Score parameter.

--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(IN in_SCHOOL_ID INTEGER, IN in_LEADERS_SCORE INTEGER)       -- Name of this stored procedure routine
LANGUAGE SQL                        -- Language used in this routine
MODIFIES SQL DATA                      -- This routine can modify data from the table

BEGIN 

	UPDATE CHICAGO_PUBLIC_SCHOOLS
	SET LEADERS_SCORE = in_LEADERS_SCORE
	WHERE SCHOOL_ID = in_SCHOOL_ID;

		
END
@                                   -- Routine termination character



Question 3:
Inside your stored procedure, write a SQL IF statement to update the Leaders_Icon field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID using the following information.
Score lower limit	Score upper limit	Icon
80	99	Very strong
60	79	Strong
40	59	Average
20	39	Weak
0	19	Very weak


--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(IN in_SCHOOL_ID INTEGER, IN in_LEADERS_SCORE INTEGER)       -- Name of this stored procedure routine
LANGUAGE SQL                        -- Language used in this routine
MODIFIES SQL DATA                      -- This routine can modify data from the table

BEGIN 

	UPDATE CHICAGO_PUBLIC_SCHOOLS
	SET LEADERS_SCORE = in_LEADERS_SCORE
	WHERE SCHOOL_ID = in_SCHOOL_ID;

IF in_LEADERS_SCORE >= 0 AND in_LEADERS_SCORE <= 19 THEN
	UPDATE CHICAGO_PUBLIC_SCHOOLS
	SET LEADERS_ICON = 'Very_weak'
	WHERE SCHOOL_ID = in_SCHOOL_ID;

ELSEIF in_LEADERS_SCORE >= 20 AND in_LEADERS_SCORE <= 39 THEN
	UPDATE CHICAGO_PUBLIC_SCHOOLS
	SET LEADERS_ICON = 'Weak'
	WHERE SCHOOL_ID = in_SCHOOL_ID;

ELSEIF in_LEADERS_SCORE >= 40 AND in_LEADERS_SCORE <= 59 THEN
	UPDATE CHICAGO_PUBLIC_SCHOOLS
	SET LEADERS_ICON = 'Average'
	WHERE SCHOOL_ID = in_SCHOOL_ID;

ELSEIF in_LEADERS_SCORE >= 60 AND in_LEADERS_SCORE <= 79 THEN
	UPDATE CHICAGO_PUBLIC_SCHOOLS
	SET LEADERS_ICON = 'Strong'
	WHERE SCHOOL_ID = in_SCHOOL_ID;

ELSEIF in_LEADERS_SCORE >= 80 AND in_LEADERS_SCORE <= 100 THEN
	UPDATE CHICAGO_PUBLIC_SCHOOLS
	SET LEADERS_ICON = 'Very_strong'
	WHERE SCHOOL_ID = in_SCHOOL_ID;


		END IF;
		
END
@                                   -- Routine termination character



Question 4
Run your code to create the stored procedure.
Take a screenshot showing the SQL query and its results.

Write a query to call the stored procedure, passing a valid school ID and a leader score of 50, to check that the procedure works as expected.
 ALTER TABLE CHICAGO_PUBLIC_SCHOOLS ALTER COLUMN LEADERS_SCORE SET DATA TYPE VARCHAR(11);
--Query to modify data type of column
CALL UPDATE_LEADERS_SCORE(6098800,99);
--To check the result
SELECT SCHOOL_ID, NAME_OF_SCHOOL "School Name", LEADERS_ICON, LEADERS_SCORE FROM CHICAGO_PUBLIC_SCHOOLS WHERE SCHOOL_ID=609880;


Exercise 4 Questions 1 & 2: Add a generic ELSE clause to the IF statement, and add to commit at the end of the procedure.

--#SET TERMINATOR @
CREATE OR REPLACE PROCEDURE UPDATE_LEADERS_SCORE(IN in_SCHOOL_ID INTEGER, IN in_LEADERS_SCORE INTEGER)       -- Name of this stored procedure routine
LANGUAGE SQL                        -- Language used in this routine
MODIFIES SQL DATA                      -- This routine can modify data from the table

BEGIN 
	--Begin an IF statement
	UPDATE CHICAGO_PUBLIC_SCHOOLS
	SET LEADERS_SCORE = in_LEADERS_SCORE
	WHERE SCHOOL_ID = in_SCHOOL_ID;

	IF in_LEADERS_SCORE >= 0 AND in_LEADERS_SCORE <= 19 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET LEADERS_ICON = 'Very_weak'
		WHERE SCHOOL_ID = in_SCHOOL_ID;

	ELSEIF in_LEADERS_SCORE >= 20 AND in_LEADERS_SCORE <= 39 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET LEADERS_ICON = 'Weak'
		WHERE SCHOOL_ID = in_SCHOOL_ID;

	ELSEIF in_LEADERS_SCORE >= 40 AND in_LEADERS_SCORE <= 59 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET LEADERS_ICON = 'Average'
		WHERE SCHOOL_ID = in_SCHOOL_ID;

	ELSEIF in_LEADERS_SCORE >= 60 AND in_LEADERS_SCORE <= 79 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET LEADERS_ICON = 'Strong'
		WHERE SCHOOL_ID = in_SCHOOL_ID;

	ELSEIF in_LEADERS_SCORE >= 80 AND in_LEADERS_SCORE <= 100 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET LEADERS_ICON = 'Very_strong'
		WHERE SCHOOL_ID = in_SCHOOL_ID;


		ELSE ROLLBACK WORK; --Rollback if the number went 100 or more; negative 1 or less
END IF; --Ends the IF statement
	COMMIT; --The end of the procedure
END
@                                   -- Routine termination character
